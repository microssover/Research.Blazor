// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Research.Infrastructure.Context;

#nullable disable

namespace Research.Infrastructure.Migrations
{
    [DbContext(typeof(ResearchDbContext))]
    [Migration("20241202140305_mig-applicationflow-title")]
    partial class migapplicationflowtitle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Research.Entity.Models.ApplicantFlow", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("DEPARTMENT_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DEPARTMENT_ID");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NEXT_FLOW_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("NEXT_FLOW_ID");

                    b.HasKey("ID");

                    b.HasIndex("DEPARTMENT_ID");

                    b.ToTable("APPLICANT_FLOW", (string)null);
                });

            modelBuilder.Entity("Research.Entity.Models.ApplicantImages", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("APPLICANT_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("APPLICANT_ID");

                    b.Property<string>("PATH")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PATH");

                    b.HasKey("ID");

                    b.HasIndex("APPLICANT_ID");

                    b.ToTable("APPLICANT_IMAGES", (string)null);
                });

            modelBuilder.Entity("Research.Entity.Models.ApplicantRecords", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime>("APPLICANT_DATE")
                        .HasColumnType("datetime2")
                        .HasColumnName("APPLICANT_DATE");

                    b.Property<Guid?>("CURRENT_FLOW_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CURRENT_FLOW_ID");

                    b.Property<string>("EMAIL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("JOB_TYPE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JOB_TYPE");

                    b.Property<Guid?>("JobTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<byte[]>("PROFILE_IMAGE")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PROFILE_IMAGE");

                    b.Property<string>("SURNAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SURNAME");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.HasKey("ID");

                    b.HasIndex("CURRENT_FLOW_ID");

                    b.HasIndex("JobTypeID");

                    b.ToTable("APPLICANT_RECORDS", (string)null);
                });

            modelBuilder.Entity("Research.Entity.Models.Department", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid?>("MANAGER_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MANAGER_ID");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.HasKey("ID");

                    b.HasIndex("MANAGER_ID")
                        .IsUnique()
                        .HasFilter("[MANAGER_ID] IS NOT NULL");

                    b.ToTable("DEPARTMENT", (string)null);
                });

            modelBuilder.Entity("Research.Entity.Models.JobType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("DEPARTMENT_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DEPARTMENT_ID");

                    b.Property<string>("DESC")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESC");

                    b.HasKey("ID");

                    b.HasIndex("DEPARTMENT_ID");

                    b.ToTable("JOBTYPE", (string)null);
                });

            modelBuilder.Entity("Research.Entity.Models.Manager", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("NAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<string>("SURNAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SURNAME");

                    b.HasKey("ID");

                    b.ToTable("MANAGER", (string)null);
                });

            modelBuilder.Entity("Research.Entity.Models.ApplicantFlow", b =>
                {
                    b.HasOne("Research.Entity.Models.Department", "Department")
                        .WithMany("Applicant_Flows")
                        .HasForeignKey("DEPARTMENT_ID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Research.Entity.Models.ApplicantImages", b =>
                {
                    b.HasOne("Research.Entity.Models.ApplicantRecords", "Applicant_Records")
                        .WithMany("Applicant_Images")
                        .HasForeignKey("APPLICANT_ID");

                    b.Navigation("Applicant_Records");
                });

            modelBuilder.Entity("Research.Entity.Models.ApplicantRecords", b =>
                {
                    b.HasOne("Research.Entity.Models.ApplicantFlow", "Applicant_Flow")
                        .WithMany("Applicant_Records")
                        .HasForeignKey("CURRENT_FLOW_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Research.Entity.Models.JobType", "JobType")
                        .WithMany("ApplicantRecords")
                        .HasForeignKey("JobTypeID");

                    b.Navigation("Applicant_Flow");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("Research.Entity.Models.Department", b =>
                {
                    b.HasOne("Research.Entity.Models.Manager", "Manager")
                        .WithOne("Department")
                        .HasForeignKey("Research.Entity.Models.Department", "MANAGER_ID");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Research.Entity.Models.JobType", b =>
                {
                    b.HasOne("Research.Entity.Models.Department", "Department")
                        .WithMany("JobTypes")
                        .HasForeignKey("DEPARTMENT_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Research.Entity.Models.ApplicantFlow", b =>
                {
                    b.Navigation("Applicant_Records");
                });

            modelBuilder.Entity("Research.Entity.Models.ApplicantRecords", b =>
                {
                    b.Navigation("Applicant_Images");
                });

            modelBuilder.Entity("Research.Entity.Models.Department", b =>
                {
                    b.Navigation("Applicant_Flows");

                    b.Navigation("JobTypes");
                });

            modelBuilder.Entity("Research.Entity.Models.JobType", b =>
                {
                    b.Navigation("ApplicantRecords");
                });

            modelBuilder.Entity("Research.Entity.Models.Manager", b =>
                {
                    b.Navigation("Department")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
